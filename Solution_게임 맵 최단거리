import java.util.*;
class Solution {
    public int[] dx = {0,1,0,-1};
    public int[] dy = {-1,0,1,0};
    public int n,m,answer;
    public int solution(int[][] maps) {
        n = maps.length;
        m = maps[0].length;
        int[][] arr = new int[n][m]; // 그 위치까지 누적 합
        arr[0][0] = 1;
        bfs(maps, arr);
        answer = arr[n-1][m-1];
        if(answer == 0) answer = -1;
        return answer;
    }
    public void bfs(int[][] maps, int[][] arr){
        Queue<int[]> q = new LinkedList<>();
        boolean[][] visited = new boolean[n][m];
        q.offer(new int[]{0,0});
        visited[0][0] = true;
        while(!q.isEmpty()){
            int[] temp = q.poll();
            if(temp[0] == n-1 && temp[1] == m-1) break;
            for(int i=0;i<4;i++){
                int r = temp[0] + dx[i];
                int c = temp[1] + dy[i];
                if(r>=0 && c>=0 && r<n && c<m){
                    if(!visited[r][c] && maps[r][c]==1){
                        visited[r][c] = true;
                        q.offer(new int[]{r,c});
                        arr[r][c] = arr[temp[0]][temp[1]] + 1;
                    }
                }
            }
        }
    }
}
/*
dfs 효율성 시간 초과
import java.util.*;
class Solution {
    public int[] dx = {0,1,0,-1};
    public int[] dy = {-1,0,1,0};
    public int min = Integer.MAX_VALUE;
    public int n,m;
    public int solution(int[][] maps) {
        int answer = -1;
        n = maps.length;
        m = maps[0].length;
        boolean[][] visited = new boolean[n][m];
        visited[0][0] = true;
        dfs(0,0,maps,visited,0);
        if(min == Integer.MAX_VALUE) answer = -1;
        else answer = min;
        return answer;
    }
    public void dfs(int row, int col, int[][] maps, boolean[][] visited, int count){
        if(min <= count) return;
        if(row == n-1 && col == m-1){
            count++;
            if(min > count) min = count;
            return;
        }
        for(int i=0;i<4;i++){
            int r = dx[i] + row;
            int c = dy[i] + col;
            if(r>=0 && c>=0 && r<n && c<m){
                if(!visited[r][c] && maps[r][c]==1){
                    visited[r][c] = true;
                    dfs(r,c,maps,visited,count+1);
                    visited[r][c] = false;
                }
            }
        }
    }
}
*/
