import java.util.*;
class Solution {
    public HashSet<Long> set = new HashSet<>();
    public int solution(int n, int k) {
        int answer = 0;
        long num = 0; // 소수가 될 수
        long index = 0; // 자릿수
        while(true){ // 진수 전환
            int temp = n%k;
            if(temp == 0){ // 소수 인지 확인
                if(set.contains(num)) answer++;
                else if(prim(num)) {
                    set.add(num);
                    answer++;
                }
                index = 0;
                num = 0;
            }
            else {
                num = num + temp*(long)Math.pow(10,index);
                index++;
            }
            n = n/k;
            if(n == 0) { // 마지막 앞자리 부분
                if(set.contains(num)) answer++;
                else if(prim(num)) answer++;
                break;
            }
        }
        return answer;
    }
    public boolean prim(long num){ // 소수 확인
        int cnt = 0;
        long n = num;
        if(num <= 1) cnt++;
        else n = (long)Math.sqrt(num);
        while(n > 1){
            if(num % n == 0) {
                cnt++;
                break;
            }
            n--;
        }
        if(cnt == 0) return true;
        else return false;
    }
}
