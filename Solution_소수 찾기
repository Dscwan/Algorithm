import java.util.*;
class Solution {
    public HashSet<Integer> set = new HashSet<>();
    public HashSet<Integer> noset = new HashSet<>(); // 정답 아니었던 애들도 넣어서 거르도록
    public int answer;
    public int solution(String numbers) {
        answer = 0;
        int length = numbers.length();
        String[] arr = new String[length];
        for(int i=0;i<length;i++){
            arr[i] = numbers.substring(i,i+1);
        }
        Arrays.sort(arr);
        for(int i=1;i<=length;i++){ // 한자리일때부터 전체 수 사용할때
            String[] output = new String[i];
            boolean[] visited = new boolean[length];
            perm(arr,visited,output,length,i,0);
        }
        return answer;
    }
    public void perm(String[] arr, boolean[] visited, String[] output,int n, int r, int depth){ // 순열
        if(depth == r){
            String temp = "";
            for(int i=0;i<r;i++){
                temp += output[i];
            }
            int num = Integer.parseInt(temp);
            if(!set.contains(num) && !noset.contains(num)){
                if(prim(num)){
                    answer ++;
                    set.add(num);
                }
                else noset.add(num);
            }         
            return;
        }
        for(int i=0;i<n;i++){
            if(!visited[i]){
                visited[i] = true;
                output[depth] = arr[i];
                perm(arr,visited,output,n,r,depth+1);
                visited[i] = false;
            }
        }
    }
    public boolean prim(int num){ // 소수인지 확인
        int n = num - 1;
        int cnt = 0;
        if(n <= 0) cnt++;
        while(n > 1){
            if(num % n == 0) {
                cnt++;
                break;
            }
            n--;
        }
        if(cnt == 0) return true;
        else return false;
    }
}
